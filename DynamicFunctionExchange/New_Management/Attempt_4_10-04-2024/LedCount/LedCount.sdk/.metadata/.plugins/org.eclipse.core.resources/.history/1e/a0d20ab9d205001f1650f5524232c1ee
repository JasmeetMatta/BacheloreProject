#include <stdlib.h>
#include "sdCard.h"

num_bs = 2;
PR_BIT_SIZE = 1012876;

bs_info *bs_list;

u32 *BS_BASEADDR;


static int SD_TransferPartial(char *FileName, u32 DestinationAddress);
static int check_bs_present(bs_info *bs_list,char *bs_name);
static int find_first_bs(bs_info *bs_list);
static int find_last_bs(bs_info *bs_list);
static void print_schedule(bs_info *bs_list);


static int check_bs_present(bs_info *bs_list,char *bs_name)
{
    int i;
    for(i=0;i<MAX_BS_NUM;i++)
    {
        if(strcmp(bs_list[i].name,bs_name) == 0)
            return i;
    }
    return -1;
}

bs_info * init_bs_list(int num_bs)
{
    int i;
    BS_BASEADDR = malloc(num_bs*PR_BIT_SIZE);
    if(BS_BASEADDR <= 0){
    	xil_printf("Memory allocation failed for bitstreams\n\r");
    }
    bs_info *bs_list;
    bs_list = (bs_info *)malloc(num_bs*sizeof(bs_info));
    if(bs_list <= 0){
    	xil_printf("malloc failed");
    	return (bs_info *)0 ;
    }
    for(i=0;i<num_bs;i++)
    {
        strcpy(bs_list[i].name,"Dummy");
        bs_list[i].size = -1;
        if(i==0)
            bs_list[i].prev = NULL;
        else
            bs_list[i].prev = &bs_list[i-1];
        if(i==num_bs-1)
            bs_list[i].next = NULL;
        else
            bs_list[i].next = &bs_list[i+1];
        bs_list[i].addr = (u32)BS_BASEADDR + i*PR_BIT_SIZE;
    }
    return bs_list;
}

